<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright 2009 Inspire-Software.com
  ~
  ~    Licensed under the Apache License, Version 2.0 (the "License");
  ~    you may not use this file except in compliance with the License.
  ~    You may obtain a copy of the License at
  ~
  ~        http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~    Unless required by applicable law or agreed to in writing, software
  ~    distributed under the License is distributed on an "AS IS" BASIS,
  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~    See the License for the specific language governing permissions and
  ~    limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd">

    <import resource="classpath:core-manager-cronjob.xml"/>
    <import resource="classpath:core-export-cronjob.xml"/>
    <import resource="classpath:core-orderstate-cronjob.xml"/>

    <!-- ################################ Bulk email  ###################################################### -->

    <bean id="bulkMailProcessor" class="org.yes.cart.bulkjob.mail.BulkMailProcessorImpl">
        <property name="jobDefinitionService" ref="jobDefinitionService"/>
        <property name="jobService" ref="jobService"/>
        <property name="mailService" ref="mailService"/>
        <property name="mailComposer" ref="mailComposer"/>
        <property name="javaMailSenderFactory" ref="mailSenderFactory"/>
        <property name="cfgContext">
            <bean class="org.yes.cart.config.impl.ConfigurationContextImpl">
                <property name="functionalArea" value="core"/>
                <property name="name" value="bulkMailProcessor"/>
                <property name="cfgInterface" value="PausableCronJobProcessor"/>
                <property name="cfgDefault" value="false"/>
                <property name="properties">
                    <props>
                        <prop key="extension">Pausable cron job</prop>
                        <prop key="description">Recurring job that sends prepared emails. Can be customised per shop.</prop>
                        <prop key="JOBDEFINITION[delay-between-emails-ms]">Delay between sending message in milliseconds (default 1000)</prop>
                        <prop key="JOBDEFINITION[exceptions-threshold]">Threshold of email send failures per shop which will force skipping all emails for that shop (default 3)</prop>
                        <prop key="SHOP[SHOP_MAIL_SERVER_CUSTOM_ENABLE]">Enable custom settings flag</prop>
                        <prop key="SHOP[SHOP_MAIL_SERVER_HOST]">Mail server host</prop>
                        <prop key="SHOP[SHOP_MAIL_SERVER_PORT]">Mail server port</prop>
                        <prop key="SHOP[SHOP_MAIL_SERVER_USERNAME]">Username (if auth enabled)</prop>
                        <prop key="SHOP[SHOP_MAIL_SERVER_PASSWORD]">Password (if auth enabled)</prop>
                        <prop key="SHOP[SHOP_MAIL_SERVER_SMTPAUTH_ENABLE]">Enable authentication</prop>
                        <prop key="SHOP[SHOP_MAIL_SERVER_STARTTLS_ENABLE]">Use TLS for connection</prop>
                    </props>
                </property>
            </bean>
        </property>
    </bean>

    <!-- ################################ Auto Import  ###################################################### -->

    <bean id="autoImportListener" class="org.yes.cart.bulkjob.bulkimport.LocalFileShareImportListenerImpl">
        <property name="jobDefinitionService" ref="jobDefinitionService"/>
        <property name="jobService" ref="jobService"/>
        <property name="shopService" ref="shopService"/>
        <property name="importDirectorService" ref="bulkImportService"/>
        <property name="reindexService" ref="reindexService"/>
        <property name="clusterService" ref="clusterService"/>
        <property name="asyncContextFactory" ref="webAppManagerAsyncContextFactory"/>
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="cfgContext">
            <bean class="org.yes.cart.config.impl.ConfigurationContextImpl">
                <property name="functionalArea" value="impex"/>
                <property name="name" value="autoImportListener"/>
                <property name="cfgInterface" value="PausableCronJobProcessor"/>
                <property name="cfgDefault" value="false"/>
                <property name="properties">
                    <props>
                        <prop key="extension">Pausable cron job</prop>
                        <prop key="description">Recurring job that runs autoimport using group configurations.</prop>
                        <prop key="JOBDEFINITION[file-import-root]">Auto import root directory (see documentation for detailed setup instructions)</prop>
                        <prop key="JOBDEFINITION[SHOPCODE.group.X.group]">Group name e.g. SHOP10.config.0.group=YC DEMO: Initial Data</prop>
                        <prop key="JOBDEFINITION[SHOPCODE.group.X.regex]">File pattern e.g. SHOP10.config.0.regex=import\\.zip</prop>
                        <prop key="JOBDEFINITION[SHOPCODE.group.X.reindex]">Flag to indicate whether reindex is required after import (true or false)</prop>
                        <prop key="JOBDEFINITION[SHOPCODE.group.X.user]">Username on behalf of whom the import will be executing</prop>
                        <prop key="JOBDEFINITION[SHOPCODE.group.X.pass]">User password on behalf of whom the import will be executing</prop>
                    </props>
                </property>
            </bean>
        </property>
    </bean>

    <!-- ################################ Image vault processors  ################################################### -->


    <bean id="imageVaultProcessor" class="org.yes.cart.bulkjob.images.LocalFileShareImageVaultProcessorImpl">
        <property name="jobDefinitionService" ref="jobDefinitionService"/>
        <property name="jobService" ref="jobService"/>
        <property name="systemService" ref="systemService"/>
        <property name="ioProvider" ref="ioProviderFactory"/>
        <property name="imageNameStrategies">
            <array>
                <ref bean="categoryImageNameStrategy"/>
                <ref bean="contentImageNameStrategy"/>
                <ref bean="brandImageNameStrategy"/>
                <ref bean="productImageNameStrategy"/>
                <ref bean="shopImageNameStrategy"/>
            </array>
        </property>
        <property name="imageImportStrategies">
            <array>
                <bean id="imageVaultProcessorCategoryImageImportDomainObjectStrategy" class="org.yes.cart.bulkimport.image.impl.CategoryImageImportDomainObjectStrategyImpl">
                    <constructor-arg index="0" ref="importFederationFacade"/>
                    <constructor-arg index="1" ref="categoryService"/>
                    <constructor-arg index="2" ref="attributeService"/>
                    <property name="insertOnly" value="true"/>
                </bean>

                <bean id="imageVaultProcessorContentImageImportDomainObjectStrategy" class="org.yes.cart.bulkimport.image.impl.ContentImageImportDomainObjectStrategyImpl">
                    <constructor-arg index="0" ref="importFederationFacade"/>
                    <constructor-arg index="1" ref="contentService"/>
                    <constructor-arg index="2" ref="attributeService"/>
                    <property name="insertOnly" value="true"/>
                </bean>

                <bean id="imageVaultProcessorBrandImageImportDomainObjectStrategy" class="org.yes.cart.bulkimport.image.impl.BrandImageImportDomainObjectStrategyImpl">
                    <constructor-arg index="0" ref="importFederationFacade"/>
                    <constructor-arg index="1" ref="brandService"/>
                    <constructor-arg index="2" ref="attributeService"/>
                    <property name="insertOnly" value="true"/>
                </bean>

                <bean id="imageVaultProcessorShopImageImportDomainObjectStrategy" class="org.yes.cart.bulkimport.image.impl.ShopImageImportDomainObjectStrategyImpl">
                    <constructor-arg index="0" ref="importFederationFacade"/>
                    <constructor-arg index="1" ref="shopService"/>
                    <constructor-arg index="2" ref="attributeService"/>
                    <property name="insertOnly" value="true"/>
                </bean>

                <bean id="imageVaultProcessorProductImageImportDomainObjectStrategy" class="org.yes.cart.bulkimport.image.impl.ProductImageImportDomainObjectStrategyImpl">
                    <constructor-arg index="0" ref="importFederationFacade"/>
                    <constructor-arg index="1" ref="productService"/>
                    <constructor-arg index="2" ref="attributeService"/>
                    <property name="insertOnly" value="true"/>
                </bean>

                <bean id="imageVaultProcessorProductSkuImageImportDomainObjectStrategy" class="org.yes.cart.bulkimport.image.impl.ProductSkuImageImportDomainObjectStrategyImpl">
                    <constructor-arg index="0" ref="importFederationFacade"/>
                    <constructor-arg index="1" ref="productSkuService"/>
                    <constructor-arg index="2" ref="attributeService"/>
                    <property name="insertOnly" value="true"/>
                </bean>
            </array>
        </property>
        <property name="reindexService" ref="reindexService"/>
        <property name="clusterService" ref="clusterService"/>
        <property name="asyncContextFactory" ref="webAppManagerAsyncContextFactory"/>
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="cfgContext">
            <bean class="org.yes.cart.config.impl.ConfigurationContextImpl">
                <property name="functionalArea" value="pim"/>
                <property name="name" value="imageVaultProcessor"/>
                <property name="cfgInterface" value="PausableCronJobProcessor"/>
                <property name="cfgDefault" value="false"/>
                <property name="properties">
                    <props>
                        <prop key="extension">Pausable cron job</prop>
                        <prop key="description">Utility to re-attach images to products by scanning filenames and creating product image attributes (Requires credentials in config.properties at root of image vault)</prop>
                        <prop key="JOBDEFINITION[config.reindex]">Flag to indicate whether reindex is required after scan (true or false)</prop>
                        <prop key="JOBDEFINITION[config.user]">Username on behalf of whom the scanning will be executing</prop>
                        <prop key="JOBDEFINITION[config.pass]">User password on behalf of whom the scanning will be executing</prop>
                    </props>
                </property>
            </bean>
        </property>
    </bean>


    <bean id="productImageVaultCleanupProcessor" class="org.yes.cart.bulkjob.images.LocalFileShareProductImageVaultCleanupProcessorImpl">
        <property name="jobDefinitionService" ref="jobDefinitionService"/>
        <property name="jobService" ref="jobService"/>
        <property name="systemService" ref="systemService"/>
        <property name="ioProvider" ref="ioProviderFactory"/>
        <property name="productService" ref="productService"/>
        <property name="cfgContext">
            <bean class="org.yes.cart.config.impl.ConfigurationContextImpl">
                <property name="functionalArea" value="pim"/>
                <property name="name" value="productImageVaultCleanupProcessor"/>
                <property name="cfgInterface" value="PausableCronJobProcessor"/>
                <property name="cfgDefault" value="false"/>
                <property name="properties">
                    <props>
                        <prop key="extension">Pausable cron job</prop>
                        <prop key="description">Utility to to scan imagevault/product and remove all images for products that do not exist</prop>
                        <prop key="JOBDEFINITION[clean-mode]">SCAN (logging only) or DELETE (removes the orphan image files)</prop>
                    </props>
                </property>
            </bean>
        </property>
    </bean>


    <!-- ################################ Cache eviction propagation  ######################################## -->

    <bean id="cacheEvictionQueueProcessor" class="org.yes.cart.bulkjob.cache.CacheEvictionQueueProcessorImpl">
        <property name="jobDefinitionService" ref="jobDefinitionService"/>
        <property name="jobService" ref="jobService"/>
        <property name="nodeService" ref="nodeService"/>
        <property name="asyncContextFactory" ref="webAppManagerAsyncContextFactory"/>
        <property name="cacheEvictionQueue" ref="cacheEvictionQueue"/>
        <property name="cfgContext">
            <bean class="org.yes.cart.config.impl.ConfigurationContextImpl">
                <property name="functionalArea" value="core"/>
                <property name="name" value="cacheEvictionQueueProcessor"/>
                <property name="cfgInterface" value="PausableCronJobProcessor"/>
                <property name="cfgDefault" value="false"/>
                <property name="properties">
                    <props>
                        <prop key="extension">Pausable cron job</prop>
                        <prop key="description">Performs bulk cache evictions on frontend servers.</prop>
                    </props>
                </property>
            </bean>
        </property>
    </bean>


    <!-- ################################ Scheduler  ####################################################### -->


    <bean id="managerCronScheduleTriggers" class="org.yes.cart.utils.spring.ArrayListBean">
        <constructor-arg>
            <list/>
        </constructor-arg>
    </bean>

    <!-- Extension for cron triggers example that should be put in "adm-cronjob-ext.xml":
        <bean id="extensionSample" class="org.yes.cart.utils.spring.ArrayListBean">
            <constructor-arg ref="managerCronScheduleTriggers"/>
            <property name="extension">
                <list>
                    <ref bean="customTriggerX" />
                    <ref bean="customTriggerY" />
                    ....
                </list>
            </property>
        </bean>
    -->

    <import resource="classpath*:adm-cronjob-ext.xml"/>

    <bean id="cronJobTriggerBuilder" class="org.yes.cart.bulkjob.cron.JobTriggerBuilderImpl">
        <constructor-arg index="0" ref="jobDefinitionService"/>
        <constructor-arg index="1" ref="jobService"/>
        <constructor-arg index="2" ref="nodeService"/>
        <constructor-arg index="3" ref="runtimeConstants"/>
    </bean>

    <bean id="jobCronSchedule" class="org.yes.cart.bulkjob.cron.SchedulerFactory">
        <property name="triggerBuilder" ref="cronJobTriggerBuilder"/>
        <property name="triggers" ref="managerCronScheduleTriggers"/>
        <property name="quartzProperties">
            <props>
                <prop key="org.quartz.scheduler.skipUpdateCheck">true</prop>
                <prop key="org.terracotta.quartz.skipUpdateCheck">true</prop>
            </props>
        </property>
        <property name="startupDelay" value="30"/><!-- Give context 10sec to stabilise before starting quartz -->
    </bean>

    <!-- ################################ Register module  ####################################################### -->

    <bean class="org.yes.cart.env.impl.ModuleImpl">
        <property name="functionalArea" value="app"/>
        <property name="name" value="jam"/>
        <property name="subName" value="manager-cronjob"/>
    </bean>

</beans>
        
